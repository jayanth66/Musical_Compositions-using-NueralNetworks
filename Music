import json
import numpy as np
import tensorflow.keras as keras
import music21 as m21
from preprocess2 import SEQUENCE_LENGTH, MAPPING_PATH
class MelodyGenerator:
def __init__(self, model_path="model.h5"):
self.model_path = model_path
self.model = keras.models.load_model(model_path) with open(MAPPING_PATH, "r") as fp:
self._mappings = json.load(fp)
self._start_symbols = ["/"] * SEQUENCE_LENGTH
def generate_melody(self, seed, num_steps, max_sequence_length, temperature): seed =
seed.split()
melody = seed
seed = self._start_symbols + seed
seed = [self._mappings[symbol] for symbol in seed] for _ in range(num_steps):
seed = seed[-max_sequence_length:]
onehot_seed = keras.utils.to_categorical(seed, num_classes=len(self._mappings)) onehot_seed
= onehot_seed[np.newaxis, ...]
probabilities = self.model.predict(onehot_seed)[0]
output_int = self._sample_with_temperature(probabilities, temperature) seed.append(output_int)
 output_symbol = [k for k, v in self._mappings.items() if v == output_int][0] if output_symbol ==
"/":
break melody.append(output_symbol)
return melody
def _sample_with_temperature(self, probabilites, temperature): predictions =
np.log(probabilites) / temperature
probabilites = np.exp(predictions) / np.sum(np.exp(predictions)) choices =
range(len(probabilites)) # [0, 1, 2, 3]
index = np.random.choice(choices, p=probabilites) return index
def save_melody(self, melody, step_duration=0.25, format="midi", file_name="mel.mid"): stream
= m21.stream.Stream()
start_symbol = None
step_counter = 1
for i, symbol in enumerate(melody):
if symbol != "_" or i + 1 == len(melody):
if start_symbol is not None:
quarter_length_duration = step_duration * step_counter # 0.25 * 4 = 1 if start_symbol == "r":
m21_event = m21.note.Rest(quarterLength=quarter_length_duration) else:
m21_event = m21.note.Note(int(start_symbol), quarterLength=quarter_length_duration)
stream.append(m21_event)
step_counter = 1 start_symbol = symbol
else:
step_counter += 1
 stream.write(format, file_name)
if __name__ == "__main__":
mg = MelodyGenerator()
seed = "67 _ 67 _ 67 _ _ 65 64 _ 64 _ 64 _ _"
seed2 = "55 _ 60 _ 60 _ 60 _ 64 _ _ 62 64"
melody = mg.generate_melody(seed2, 500, SEQUENCE_LENGTH, 0.3) print(melody)
mg.save_melody(melody)
import tensorflow.keras as keras
from preprocess2 import generate_training_sequences, SEQUENCE_LENGTH
OUTPUT_UNITS = 38
NUM_UNITS = [256]
LOSS = "sparse_categorical_crossentropy" LEARNING_RATE = 0.001
EPOCHS = 50
BATCH_SIZE = 64 SAVE_MODEL_PATH = "model.h5"
def build_model(output_units, num_units, loss, learning_rate): """Builds and compiles model
:param output_units (int): Num output units
:param num_units (list of int): Num of units in hidden layers :param loss (str): Type of loss
function to use
:param learning_rate (float): Learning rate to apply
:return model (tf model): Where the magic happens :D
 """
# create the model architecture
# create the model architecture
input = keras.layers.Input(shape=(None, output_units)) x = keras.layers.LSTM(num_units[0])
(input)
x = keras.layers.Dropout(0.2)(x)
output = keras.layers.Dense(output_units, activation="softmax")(x) model = keras.Model(input,
output)
# compile model model.compile(loss=loss,
optimizer=keras.optimizers.Adam(learning_rate=learning_rate), metrics=["accuracy"])
model.summary() return model
def train(output_units=OUTPUT_UNITS, num_units=NUM_UNITS, loss=LOSS,
learning_rate=LEARNING_RATE):
"""Train and save TF model.
:param output_units (int): Num output units
:param num_units (list of int): Num of units in hidden layers :param loss (str): Type of loss
function to use
:param learning_rate (float): Learning rate to apply
"""
 # generate the training sequences
inputs, targets = generate_training_sequences(SEQUENCE_LENGTH)
# build the network
model = build_model(output_units, num_units, loss, learning_rate)
# train the model
model.fit(inputs, targets, epochs=EPOCHS, batch_size=BATCH_SIZE)
# save the model model.save(SAVE_MODEL_PATH)
if __name__ == "__main__":
train() 
